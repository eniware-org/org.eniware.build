<project basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:if="ant:if"
	xmlns:jacoco="antlib:org.jacoco.ant">

	<property file="${basedir}/build.properties"/>
	<property name="dir.test.reports" value="${basedir}/reports"/>
	
	<import file="lib-build.xml"/>

	<macrodef name="bundle-iterate">
		<attribute name="target"/>
		<sequential>
			<subant target="@{target}">
				<fileset refid="test.build.files"/>
				<property name="dir.test.reports" value="${dir.test.reports}"/>
			</subant>
		</sequential>
	</macrodef>
	
	<patternset id="project-buildfiles">
		<include name="org.eniware.common/*.test/build.xml"/>
		<include name="org.eniware.external/*.test/build.xml"/>
		<include name="org.eniware.loxone/*.test/build.xml"/>
		<include name="org.eniware.edge/*.test/build.xml"/>
		<include name="org.eniware.central/*.test/build.xml"/>
	</patternset>
	
	<patternset id="project-sourcedirs">
		<include name="org.eniware.common/*/src"/>
		<include name="org.eniware.external/*/src"/>
		<include name="org.eniware.loxone/*/src"/>
		<include name="org.eniware.edge/*/src"/>
		<include name="org.eniware.central/*/src"/>

		<exclude name="org.eniware.common/*.test/src"/>
		<exclude name="org.eniware.external/*.test/src"/>
		<exclude name="org.eniware.loxone/*.test/src"/>
		<exclude name="org.eniware.edge/*.test/src"/>
		<exclude name="org.eniware.central/*.test/src"/>
	</patternset>
	
	<patternset id="project-classfiles">
		<include name="org.eniware.common/*.test/build/ant/deps/*.jar"/>
		<include name="org.eniware.external/*.test/build/ant/deps/*.jar"/>
		<include name="org.eniware.loxone/*.test/build/ant/deps/*.jar"/>
		<include name="org.eniware.edge/*.test/build/ant/deps/*.jar"/>
		<include name="org.eniware.central/*.test/build/ant/deps/*.jar"/>
	</patternset>
	
	<target name="test-all.clean">
		<delete dir="${dir.test.reports}" failonerror="no"/>
	</target>
	
	<target name="test-all-clean" description="Clean and build all unit tests report from scratch"
		depends="test-all.clean,test-all,test-report"/>

	<target name="test-all" description="Build all unit tests report from scratch">
		<fileset id="test.build.files" dir="${basedir}/../..">
			<patternset refid="project-buildfiles"/>
		</fileset>
		<pathconvert property="test.build.bundles" pathsep="${line.separator}&#9;">
			<fileset refid="test.build.files"/>
			<mapper type="regexp" from="^.*/(org.eniware..*)/build.xml$$" to="\1"/>
		</pathconvert>
		<echo message="Projects to test:${line.separator}&#9;${test.build.bundles}"/>
		<bundle-iterate target="clean-test"/>
	</target>

	<target name="coverage-report-all" description="Generate a HTML code coverage report from the test results"
			depends="jacoco.init">
		<fileset id="coverage.classfiles" dir="${basedir}/../..">
			<patternset refid="project-classfiles"/>
		</fileset>
		<dirset id="coverage.sourcedirs" dir="${basedir}/../..">
			<patternset refid="project-sourcedirs"/>
		</dirset>

		<pathconvert property="coverage.classfiles.path" pathsep="${line.separator}&#9;">
			<fileset refid="coverage.classfiles"/>
			<mapper type="regexp" from="^.*/(org.eniware..*)/build/.*$$" to="\1"/>
		</pathconvert>
		<pathconvert property="coverage.sourcedirs.path" pathsep="${line.separator}&#9;">
			<dirset refid="coverage.sourcedirs"/>
			<mapper type="regexp" from="^.*/(org.eniware..*)/src$$" to="\1"/>
		</pathconvert>
		<echo message="Coverage class files:${line.separator}&#9;${coverage.classfiles.path}"/>
		<echo message="Coverage source dirs:${line.separator}&#9;${coverage.sourcedirs.path}"/>
		
		<jacoco:report>
			<executiondata>
				<fileset dir="${dir.test.reports}">
					<include name="*.exec" />
				</fileset>
			</executiondata>		
			<structure name="EniwareNetwork">
				<classfiles>
					<fileset refid="coverage.classfiles"/>
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<dirset refid="coverage.sourcedirs"/>
				</sourcefiles>
			</structure>			
			<html destdir="${dir.test.reports}/coverage"/>
		</jacoco:report>
	</target>

</project>
